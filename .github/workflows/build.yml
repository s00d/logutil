name: Rust

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
#          - target: x86_64-unknown-linux-gnu
#            platform: linux/amd64
#          - target: aarch64-unknown-linux-gnu
#            platform: linux/arm64
          - target: i686-unknown-linux-musl
            platform: linux/arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-${{ matrix.target }}

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host


      - name: Setup docker
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ matrix.platform }}
          push: true
          tags: localhost:5000/logutil:latest

      - name: Build
        run: |
          docker run -v ~/.cargo/registry:/root/.cargo/registry -v ~/.cargo/git:/root/.cargo/git --platform ${{ matrix.platform }} --rm -v $PWD:/code localhost:5000/logutil:latest bash -c 'rustup target add ${{ matrix.target }} ; cargo build --release --target ${{ matrix.target }}'

      - name: Rename binary
        run: |
          mkdir -p artifacts
          cp target/${{ matrix.target }}/release/logutil artifacts/logutil-${{ matrix.target }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}-binary
          path: artifacts/logutil-${{ matrix.target }}

      - name: Get Cargo Version
        id: cargo_version
        run: |
          VERSION=$(grep '^version =' Cargo.toml | head -n 1 | sed 's/.*"\(.*\)".*/\1/')
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.VERSION }}
          name: Release v${{ env.VERSION }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.VERSION }}
          files: |
            artifacts/logutil-${{ matrix.target }}
